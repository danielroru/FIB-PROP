/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interficie;
import Dominio.ControladoraDominio;
import java.io.File;
import java.io.IOException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Cartman
 */
public class ListarUsuarios extends javax.swing.JFrame {
    
    JFileChooser seleccionado = new JFileChooser();
    File archivo;
    private ControladoraInterficie CD = new ControladoraInterficie();
    private String usuarioMostrado = null;
    
    private void escuchasVisibles(boolean b){
        addB.setVisible(b);
        delB.setVisible(b);
        delAllSongsB.setVisible(b);
    }
    
    public void cerrar() {
        Object[] opciones = {"Aceptar", "Cancelar"};
        int eleccion = JOptionPane.showOptionDialog(rootPane,
                "¿Desea salir de la aplicación? Todos los cambios no guardados se perderán.",
                "Mensaje de Confirmacion",
                JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,
                null,opciones,"Aceptar");
        if (eleccion == JOptionPane.YES_OPTION) dispose();
    }
    
    
    private void modUserVisible(boolean b){
        newNameL.setVisible(b);
        newNameTxt.setVisible(b);
        sureB.setVisible(b);
    }
    
    private void cargarTablas(){
        DefaultTableModel model = (DefaultTableModel)userTable.getModel();
        DefaultTableModel model2 = (DefaultTableModel) songTable.getModel();
        escuchasVisibles(false);
        modUserVisible(false);
        model.setRowCount(0);
        model2.setRowCount(0);
        ArrayList<String> list = new ArrayList<>();
        list = CD.getNombreUsuarios();
        for(int i = 0; i < list.size(); ++i){
            Object res[] = {list.get(i)};
            model.addRow(res);
        }
    }
    /**
     * Creates new form ListarUsuarios
     */
    public ListarUsuarios(ControladoraInterficie cd) {
        CD = cd;
        initComponents();
    //   CD.prueba();
        cargarTablas();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        volverB = new javax.swing.JButton();
        notif = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        userTxt = new javax.swing.JTextField();
        userB = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        songTable = new javax.swing.JTable();
        addB = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        delB = new javax.swing.JButton();
        error = new javax.swing.JLabel();
        delUserB = new javax.swing.JButton();
        delAllUserB = new javax.swing.JButton();
        userMod = new javax.swing.JButton();
        newNameL = new javax.swing.JLabel();
        newNameTxt = new javax.swing.JTextField();
        sureB = new javax.swing.JButton();
        usuarioEscuchas = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        saveB = new javax.swing.JButton();
        delAllSongsB = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("YOUTUBE Mix: Lista de Usuarios & Escuchas");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Console", 0, 24)); // NOI18N
        jLabel1.setText("Listar Usuarios Con Sus Escuchas");

        volverB.setText("Volver");
        volverB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBActionPerformed(evt);
            }
        });

        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Usuarios"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        userTable.setColumnSelectionAllowed(true);
        userTable.getTableHeader().setReorderingAllowed(false);
        userTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(userTable);
        userTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (userTable.getColumnModel().getColumnCount() > 0) {
            userTable.getColumnModel().getColumn(0).setResizable(false);
        }

        userTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userTxtActionPerformed(evt);
            }
        });

        userB.setText("Añadir Usuario");
        userB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userBActionPerformed(evt);
            }
        });

        songTable.setAutoCreateRowSorter(true);
        songTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Titulo", "Autor", "Album", "Año", "Estilos"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        songTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(songTable);

        addB.setText("Añadir Cancion");
        addB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBActionPerformed(evt);
            }
        });

        jLabel3.setText("Usuario:");

        delB.setText("Eliminar Cancion");
        delB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delBActionPerformed(evt);
            }
        });

        delUserB.setText("Eliminar Usuario");
        delUserB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delUserBActionPerformed(evt);
            }
        });

        delAllUserB.setText("Eliminar Todos");
        delAllUserB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delAllUserBActionPerformed(evt);
            }
        });

        userMod.setText("Modificar Usuario");
        userMod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userModActionPerformed(evt);
            }
        });

        newNameL.setText("Nuevo nombre:");

        sureB.setText("Modificar");
        sureB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sureBActionPerformed(evt);
            }
        });

        jButton1.setText("Cargar Datos");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        saveB.setText("Guardar Datos");
        saveB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBActionPerformed(evt);
            }
        });

        delAllSongsB.setText("Eliminar Todas");
        delAllSongsB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delAllSongsBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(delUserB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(delAllUserB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(userMod, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(newNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(30, 30, 30)
                                        .addComponent(sureB))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(25, 25, 25)
                                        .addComponent(newNameL, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(userTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 664, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(addB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(delB, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE))
                                            .addComponent(delAllSongsB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(usuarioEscuchas, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(181, 181, 181)
                                .addComponent(saveB, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(270, 270, 270)
                        .addComponent(jLabel1))
                    .addComponent(userB, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(442, 442, 442)
                        .addComponent(notif, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(error, javax.swing.GroupLayout.PREFERRED_SIZE, 815, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(volverB)
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usuarioEscuchas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addComponent(delUserB, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addComponent(delAllUserB, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(userMod, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(newNameL)
                                .addGap(10, 10, 10)
                                .addComponent(newNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(sureB)))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(userTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(saveB, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(addB, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(84, 84, 84)
                        .addComponent(delB, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(78, 78, 78)
                        .addComponent(delAllSongsB, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(userB, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(notif)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(error, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(volverB))
                .addGap(13, 13, 13))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBActionPerformed
        MenuPrincipal obj = new MenuPrincipal(CD);
        obj.setLocationRelativeTo(null);
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_volverBActionPerformed

    private void userTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userTxtActionPerformed

    private void userBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userBActionPerformed
        DefaultTableModel model = (DefaultTableModel)userTable.getModel();
        String user = userTxt.getText();
        
        if(!user.equals("")){
            if(CD.isUsuario(user)) error.setText("El usuario ya existe.");
            else {
                Set<Integer> Escuchas = new HashSet();
                CD.addUsuario(user, Escuchas);
                Object[] row = {user};
                model.addRow(row);
                error.setText("El usuario se ha añadido correctamente.");
            }
            
        }
    }//GEN-LAST:event_userBActionPerformed

    private void userTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userTableMouseClicked
        DefaultTableModel model = (DefaultTableModel) userTable.getModel();
        DefaultTableModel model2 = (DefaultTableModel) songTable.getModel();
        
        newNameTxt.setText(model.getValueAt(userTable.getSelectedRow(), 0).toString());
        
        model2.setRowCount(0);
        error.setText("Mostrando escuchas...");
        escuchasVisibles(true);
        String user = model.getValueAt(userTable.getSelectedRow(),0).toString();
        ArrayList<Object> obj = CD.cargarCancionesUsuarios(user);
        for(int i = 0; i < obj.size(); ++i){
            Object res[] = (Object[]) obj.get(i);
            model2.addRow(res);
        }
        usuarioMostrado = user;
        error.setText("Mostrando escuchas de " + user);
        usuarioEscuchas.setText("Mostrando escuchas de " + user + ":");
    }//GEN-LAST:event_userTableMouseClicked

    private void delUserBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delUserBActionPerformed
         DefaultTableModel model = (DefaultTableModel)userTable.getModel();
         DefaultTableModel model2 = (DefaultTableModel) songTable.getModel();
            
        if(userTable.getSelectedRow() == -1){
            if(userTable.getRowCount() == 0) error.setText("La tabla está vacía");
            else error.setText("Has de seleccionar un usuario");
        }
        else {
            String user = model.getValueAt(userTable.getSelectedRow(), 0).toString();
            CD.delUsuario(user);
            model.removeRow(userTable.getSelectedRow());
            if(usuarioMostrado.equals(user)){
              usuarioEscuchas.setText("");
              model2.setRowCount(0);  
              usuarioMostrado = null;
              escuchasVisibles(false);
            }
            error.setText("El usuario ha sido eliminado correctamente");
        }
    }//GEN-LAST:event_delUserBActionPerformed

    private void delAllUserBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delAllUserBActionPerformed
         DefaultTableModel model = (DefaultTableModel)userTable.getModel();
         DefaultTableModel model2 = (DefaultTableModel) songTable.getModel();
            
        if(userTable.getRowCount() == 0) error.setText("La tabla está vacía");
        else{
            CD.delAllUsuarios();
            model.setRowCount(0);
            model2.setRowCount(0);
            usuarioEscuchas.setText("");
            usuarioMostrado = null;
            escuchasVisibles(false);
            error.setText("Todos los usuarios han sido eliminados");
        }
    }//GEN-LAST:event_delAllUserBActionPerformed

    private void userModActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userModActionPerformed
      
        if(userTable.getSelectedRow() == -1){
            if(userTable.getRowCount() == 0) error.setText("La tabla está vacía");
            else error.setText("Has de seleccionar un usuario");
        }
        else{
            modUserVisible(true);
        }
    }//GEN-LAST:event_userModActionPerformed

    private void sureBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sureBActionPerformed
        DefaultTableModel model = (DefaultTableModel)userTable.getModel();
        
        String newUser = newNameTxt.getText();
        String oldUser = model.getValueAt(userTable.getSelectedRow(),0).toString();
        
        if(newUser.equals(oldUser)) {
            error.setText("El nombre no se ha modificado");
            modUserVisible(false);
        }
        else if(CD.isUsuario(newUser)) error.setText("El usuario ya existe.");
        else{
            Set<Integer> set = new HashSet<> (CD.getEscuchaUsuario(oldUser));
            CD.modUsuario(oldUser, newUser, set);
            model.setValueAt(newUser,userTable.getSelectedRow() ,0);
            if(oldUser.equals(usuarioMostrado)){
                usuarioMostrado = newUser;
                usuarioEscuchas.setText("Mostrando escuchas de " + newUser + ":");
            }
            error.setText("El nombre se ha modificado correctamente");
            modUserVisible(false);
            
        }
    }//GEN-LAST:event_sureBActionPerformed

    private void addBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBActionPerformed
        AnadirCancionUsuario obj = new AnadirCancionUsuario(CD,usuarioMostrado);
        obj.setLocationRelativeTo(null);
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_addBActionPerformed

    private void delBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delBActionPerformed
        DefaultTableModel model = (DefaultTableModel) songTable.getModel();
        
        if(songTable.getSelectedRow() == -1){
            if(songTable.getRowCount() == 0) error.setText("El usuario no tiene canciones");
            else error.setText("Has de seleccionar una cancion");
        }
        else{
            String Tit = model.getValueAt(songTable.getSelectedRow(), 0).toString();
            String Aut = model.getValueAt(songTable.getSelectedRow(), 1).toString();
            CD.delCancionUsusario(usuarioMostrado, Tit, Aut);
            model.removeRow(songTable.getSelectedRow());
            error.setText("Eliminada correctamente");
        }
    }//GEN-LAST:event_delBActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (seleccionado.showDialog(this,"Abrir archivo") == JFileChooser.APPROVE_OPTION) {
            archivo = seleccionado.getSelectedFile();
            if (archivo.canRead()) {
                if(archivo.getName().endsWith("txt")) {
                    String filename = archivo.getAbsolutePath();
                    CD.cargarCancionesUsuarioFicherov2(filename);
                    JOptionPane.showMessageDialog(null, "Fichero \""+archivo.getAbsoluteFile()+"\" cargado con exito.");
                    cargarTablas();
                }
                else JOptionPane.showMessageDialog(null, "El archivo seleccionado no es valido.");
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void delAllSongsBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delAllSongsBActionPerformed
        DefaultTableModel model = (DefaultTableModel) songTable.getModel();
        

        if(songTable.getRowCount() == 0) error.setText("El usuario no tiene canciones");
        else{
            CD.vaciarEscuchasUsuario(usuarioMostrado);
            model.setRowCount(0);   
            error.setText("Las canciones del usuario han sido eliminadas");
        }
    }//GEN-LAST:event_delAllSongsBActionPerformed

    private void saveBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBActionPerformed
        if (seleccionado.showDialog(this,"Guardar archivo") == JFileChooser.APPROVE_OPTION) {
            archivo = seleccionado.getSelectedFile();
            String path = archivo.getAbsolutePath();
            
            if(archivo.getName().endsWith("txt")) {  //COMPROBAMOS QUE SEA EXTENSION .TXT
                
                if (!archivo.exists()) {    // SI EL FICHERO NO EXISTE LO CREAMOS
                    File fichero = new File(path);
                    try {
                        fichero.createNewFile();
                    } catch (IOException ex) {
                        Logger.getLogger(Menu_AdminAlgo.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                
                if (archivo.canRead()) {    // SI NO PUEDE LEERSE ALGO PASA, ABORTAMOS  
                    CD.guardarUserFichero(path);
                    JOptionPane.showMessageDialog(null, "Fichero guardado en \""+ path +"\"");
                }
                else JOptionPane.showMessageDialog(null, "El archivo NO ha podido leerse.");
            }
            else JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un \".txt\" valido.");
        }
    }//GEN-LAST:event_saveBActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        cerrar();            // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListarUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListarUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListarUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListarUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new ListarUsuarios().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addB;
    private javax.swing.JButton delAllSongsB;
    private javax.swing.JButton delAllUserB;
    private javax.swing.JButton delB;
    private javax.swing.JButton delUserB;
    private javax.swing.JLabel error;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel newNameL;
    private javax.swing.JTextField newNameTxt;
    private javax.swing.JLabel notif;
    private javax.swing.JButton saveB;
    private javax.swing.JTable songTable;
    private javax.swing.JButton sureB;
    private javax.swing.JButton userB;
    private javax.swing.JButton userMod;
    private javax.swing.JTable userTable;
    private javax.swing.JTextField userTxt;
    private javax.swing.JLabel usuarioEscuchas;
    private javax.swing.JButton volverB;
    // End of variables declaration//GEN-END:variables
}
